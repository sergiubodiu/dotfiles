#!/bin/bash

# GitHub - initialize from existing directory

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git-init-repo-from-dir() {
   if [ $# -eq 0  ]; then
       echo 'Usage: git-init-repo-from-dir git@github.com:/youruser/somename.git'
   else
       git add .
       git commit -m 'initial commit comment'
       git remote add origin $1
       git pull origin master
   fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Find process for running port

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pid4port() {
   if [ $# -eq 0  ]; then
       echo 'Usage: pid4port 8080'
   else
        lsof -i:$1 -t
   fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Git time message with

gtime() {

   if [ $# -eq 0  ]; then

       echo 'Usage: gtime 2016-05-11T22:13:13 -m "this is my commit message"'

   else

        echo "GIT_AUTHOR_DATE=$1T22:13:13 GIT_COMMITTER_DATE=$1T22:13:13 git commit ${@:2}"

        GIT_AUTHOR_DATE="$1T22:13:13" GIT_COMMITTER_DATE="$1T22:13:13" git commit "${@:2}"

   fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Commit git message with all changes

gcommit() {

   if [ $# -eq 0  ]; then

       echo 'Usage: gcommit this is my commit message'

   else

      echo "git commit -am $* && git push"

      git commit -am "$*" && git push

   fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file

datauri() {

    local mimeType=''

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        printf "'%s' is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory

delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get gzip information (gzipped file size + reduction size)

gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $(($originalSize-$gzippedSize)) )" \
                        "$( printf "%s %s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e "s/0*$//;s/\.$//" )"
                            #              └─ remove tailing zeros

        else
            printf "'%s' is empty.\n" "$1"
        fi
    else
        printf "'%s' is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create new directories and enter the first one

mkd() {
    [ -n "$*" ] && mkdir -p "$@" && cd "$@"
    #                     └─ make parent directories if needed
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history

qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory

qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.jar)      unzip "$1"                            ;;
      *.war)      unzip "$1"                            ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Start an HTTP server from a directory, optionally specifying the port

server() {

    declare -r MAX_NUMBER_OF_TRIES=10
    local i=0
    local port="${1:-8000}"

    # Wait for the server to be available, and once
    # it is, open its address in the default browser
    while [ $i -lt $MAX_NUMBER_OF_TRIES ]; do
        if [ "$(lsof -i -nP | grep "$port" | grep -i "python")" != "" ]; then
            o "http://localhost:${port}/"
            break;
        fi
        i=$(( i + 1 ))
        sleep 1
    done &

    # Start server
    python -c "

import sys

try:
    import SimpleHTTPServer as server
    import SocketServer as socketserver
except ImportError:

    # In Python 3, the 'SimpleHTTPServer'
    # module has been merged into 'http.server'

    import http.server as server
    import socketserver

handler = server.SimpleHTTPRequestHandler
map = handler.extensions_map
port = int(sys.argv[1])

# Set default Content-Type to 'text/plain'
map[''] = 'text/plain'

# Serve everything as UTF-8 (although not technically
# correct, this doesn't break anything for binary files)
for key, value in map.items():
    map[key] = value + '; charset=utf-8'

# Create, but don't automatically bind socket
# (the 'allow_reuse_address' option needs to be set first)
httpd = socketserver.ThreadingTCPServer(('localhost', port), handler, False)

# Prevent 'cannot bind to address' errors on restart
# https://brokenbad.com/address-reuse-in-pythons-socketserver/
httpd.allow_reuse_address = True

# Manually bind socket and start the server
httpd.server_bind()
httpd.server_activate()
print('Serving content on port:', port)
httpd.serve_forever()

    " "$port"

}
