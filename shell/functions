#!/bin/bash

bookmarks() {
    if [ ! -f bookmarks.html ]; then
        echo 'File not found!'
    else
        sed -n '/<DT><A HREF/s/^.*<DT><A HREF="\(.*\)">\(.*\)<\/A>/\1;"\2"/p' bookmarks.html > bookmarks.csv
        wc -l bookmarks.csv
    fi
}

# GitHub - initialize from existing directory
git-init-repo-from-dir() {
    if [ $# -eq 0  ]; then
        echo 'Usage: git-init-repo-from-dir git@github.com:/youruser/somename.git'
    else
        git add .
        git commit -m 'initial commit comment'
        git remote add origin $1
        git pull origin master
    fi
}

# Git time message with
git-commit-time() {

    if [ $# -eq 0  ]; then

        echo 'Usage: git-commit-time 2016-05-11T22:13:13 -m "this is my commit message"'

    else

        echo "GIT_AUTHOR_DATE=$1T22:13:13 GIT_COMMITTER_DATE=$1T22:13:13 git commit ${@:2}"

        GIT_AUTHOR_DATE="$1T22:13:13" GIT_COMMITTER_DATE="$1T22:13:13" git commit "${@:2}"

    fi
}

# Update the git repositories in the current folder
git-update-repos() {
    CUR_DIR=$(pwd)

    echo "\n\033[1mPulling in latest changes for all repositories...\033[0m\n"

    for i in $(find . -maxdepth 2 -name ".git" | cut -c 3-); do

        echo "";
        echo "\033[33m"+$i+"\033[0m";
        cd "$i";
        cd ..;
        git pull origin master;
        cd $CUR_DIR

    done

    echo "\n\033[32mComplete!\033[0m\n"
}

# Find gradle module dependency
gradle-dependency () {
    local module="$1"

    find ~/.gradle/caches -name "${module}*.jar" ! -name '*-sources.jar' -type f
}

# Create data URI from a file
datauri() {

    local mimeType=''

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        printf "'%s' is not a file.\n" "$1"
    fi

}

# Delete files that match a certain pattern from the current directory
delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Sort the "du"-command output and use human-readable units.
duh() {
  local unit=""
  local size=""

  du -k "$@" | sort -n | while read size fname; do
    for unit in KiB MiB GiB TiB PiB EiB ZiB YiB; do
      if [ "$size" -lt 1024 ]; then
        echo -e "${size} ${unit}\t${fname}"
        break
      fi
      size=$((size/1024))
    done
  done
}

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
    if [ -f "$1" ]; then
    case "$1" in
        *.tar.bz2)  tar -jxvf "$1"                        ;;
        *.tar.gz)   tar -zxvf "$1"                        ;;
        *.bz2)      bunzip2 "$1"                          ;;
        *.dmg)      hdiutil mount "$1"                    ;;
        *.gz)       gunzip "$1"                           ;;
        *.tar)      tar -xvf "$1"                         ;;
        *.tbz2)     tar -jxvf "$1"                        ;;
        *.tgz)      tar -zxvf "$1"                        ;;
        *.jar)      unzip "$1"                            ;;
        *.war)      unzip "$1"                            ;;
        *.zip)      unzip "$1"                            ;;
        *.ZIP)      unzip "$1"                            ;;
        *.pax)      cat "$1" | pax -r                     ;;
        *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
        *.Z)        uncompress "$1"                       ;;
        *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
    else
        echo "'$1' is not a valid file to extract"
    fi
}

# fs: Determine size of a file or total size of a directory
fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi

    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Get gzip information (gzipped file size + reduction size)
gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs $originalSize)"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs $gzippedSize)"

            printf " reduction:       %12s [%s%%]\n\n" \
                "$( hrfs $(($originalSize-$gzippedSize)) )" \
                "$( printf "%s %s" "$originalSize $gzippedSize" | \
                    awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                    sed -e "s/0*$//;s/\.$//" )"
                    #              └─ remove tailing zeros
        else
            printf "'%s' is empty.\n" "$1"
        fi
    else
        printf "'%s' is not a file.\n" "$1"
    fi

}

# Create new directories and enter the first one
mkd() {
    [ -n "$*" ] && mkdir -p "$@" && cd "$@"
    #                     └─ make parent directories if needed
}

# Search history
qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

# Finds the process listening to the specified port and kills it
killport() {
    if [ ! -n "$1" ] || [ $1 == '--help' ] || [ $1 == '-h' ]
    then
        echo '`killport <PORT>` finds the process listening to the specified port and kills it.'
    else
        process_line=`lsof -i :$1 | tail -1`
        if [ "$process_line" == "" ]
        then
            echo "no processes listening on $1"
        else
            process_name=`echo "$process_line" | awk '{print $1}'`
            echo "killing $process_name"
            kill `echo "$process_line" | awk '{print $2}'`
        fi
    fi
}

# Find process for running port
pid4port() {
    if [ $# -eq 0  ]; then
        echo 'Usage: pid4port 8080'
    else
        lsof -i:$1 -t
    fi
}

add_proxy() {
    # -- update git
    git config --system http.proxy $HTTP_PROXY
    git config --system https.proxy $HTTPS_PROXY
    git config --list

    # -- update npm
    # echo "registry=http://registry.npmjs.org/" >> ~/.npmrc
    # echo "strict-ssl=false" >> ~/.npmrc
    npm config set proxy $HTTP_PROXY
    npm config set http_proxy $HTTP_PROXY
    npm config set https-proxy $HTTP_PROXY
    # npm config list
    # -- update .ssh/config, commenting out all ProxyCommand directives
    sed -i .bak '/^[#][ ]*ProxyCommand nc.*$/ s/^#\(.*ProxyCommand nc.*$\)/\1/' ~/.ssh/config
}

remove_proxy() {
    git config --system --unset http.proxy
    git config --system --unset https.proxy
    npm config rm proxy
    npm config rm http_proxy
    npm config rm https-proxy
    sed -i .bak '/^[^#][ ]*ProxyCommand nc.*$/ s/\(^.*ProxyCommand nc.*$\)/#\1/' ~/.ssh/config
}
