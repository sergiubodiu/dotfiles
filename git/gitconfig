[alias]

    aliases = config --get-regexp alias             # List aliases.
    amend   = commit --amend --reuse-message=HEAD   # Amend the currently staged files to the latest commit
    f       = fetch origin master:master            # Fetch master branch
    lg      = log --graph --pretty=custom           # Show custom graph
    lc      = shortlog --summary --numbered         # List contributors
    lc      = shortlog --email --numbered --summary # List contributors.
    lt      = describe --abbrev=0 --tags            # Show latest tag
    p       = push
    pom     = push origin master
    rau     = remote add upstream
    rom     = rebase origin/master                  # https://help.github.com/articles/configuring-a-remote-for-a-fork/
    s       = status -s                             # View the current working tree status using the short format

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Sync a fork of a repository to keep it up-to-date with the upstream repository.
    sync = "!f() { \
        git fetch upstream; \
        git checkout master; \
        git merge upstream/master; \
    }; f"

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Find commits by source code
    fc = "!f() { git log --pretty=custom --decorate --date=short -S\"$1\"; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=custom --decorate --date=short --grep=\"$1\"; }; f"

    # List remote branches
    lrb = "!f() { git ls-remote --heads "${1:-origin}"; }; f"

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Remove last commits (by default it removes the last commit).
    rlc = "!f() { git reset --hard \"HEAD~${1:-1}\"; }; f"

    # Undo last commits (by default it undoes the last commit).
    ulc = "!f() { git reset --soft \"HEAD~${1:-1}\"; }; f"

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]

    # Use colors in Git commands that are capable of colored output when
    ui = auto

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow

    new = green
    old = red

    newMoved = cyan
    oldMoved = blue

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[core]

    abbrev = 12
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    autocrlf = input
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[diff]

    # Show blocks of moved text of at least 20
    # alphanumeric characters differently than adds/deletes.
    # https://git-scm.com/docs/git-diff#git-diff-zebra
    colorMoved = zebra

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(green)%ar %Creset%s %C(yellow)(%an)"
    #                     │        │            │         │             └─ author name
    #                     │        │            │         └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[push]

    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out
    followTags = true

[user]

    # Don't guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
    useConfigOnly = true

[include]

    # Import local config for privacy
    path = ~/.gitconfig.local
[http]
	postBuffer = 1048576000
