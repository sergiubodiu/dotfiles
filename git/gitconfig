[alias]

    lg  = log --graph --pretty=custom               # Show custom graph
    lc  = shortlog --summary --numbered             # List contributors
    rlc = reset --hard HEAD~1                       # Remove last commit
    s   = status
    ulc = reset --soft HEAD~1                       # Undo last commit
    f   = fetch origin master:master                # Fetch master branch
    rau = remote add upstream                       # https://help.github.com/articles/configuring-a-remote-for-a-fork/
    contributors = shortlog --summary --numbered    # List contributors with number of commits
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by source code

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Find commits by commit message

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch

    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    abbrev = 12
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    autocrlf = false
    excludesfile = ~/.gitignore

[diff]

    # Detect copies as well as renames
    renames = copies

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(green)%ar %Creset%s %C(yellow)(%an)"
    #                     │        │            │         │             └─ author name
    #                     │        │            │         └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[push]

    # https://git-scm.com/docs/git-config#git-config-pushdefault
    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out
    followTags = true
    default = simple

[pull]

    rebase = true
    
[rebase]

    autoStash = true

[merge]

    conflictstyle = diff3    

[include]

    # Import local config for privacy
    path = ~/.gitconfig.local

[color]

    # Use colors in Git commands that are capable of colored output when
    ui = auto
